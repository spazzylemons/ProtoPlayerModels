package spazzylemons.protoplayermodels.config

import net.minecraft.client.MinecraftClient
import spazzylemons.protoplayermodels.CONFIG_FILE
import spazzylemons.protoplayermodels.CONFIG_FOLDER
import spazzylemons.protoplayermodels.MOD_ID
import java.io.File
import java.io.IOException
import java.util.Properties

data class Settings(
    // true if the protogen model is enabled
    val isEnabled: Boolean,
) {
    // run in critical sections, so we catch exceptions here
    fun save() = runCatching {
        getConfigFile().writer().use {
            toProperties().store(it, settingsHeader)
        }
    }.isSuccess
}

private val configFolder = MinecraftClient.getInstance().runDirectory.resolve(CONFIG_FOLDER).resolve(MOD_ID)

private fun getConfigFile(): File {
    if (!configFolder.exists()) configFolder.mkdirs() || throw IOException("Cannot create config folders")
    return configFolder.resolve(CONFIG_FILE)
}

private const val settingsHeader = "autogenerated; comments will not be preserved"

private val defaultSettings = Properties().apply {
    setProperty("isEnabled", "true")
}

fun loadSettings(): Settings {
    // this will be called in areas where errors will crash the game if not called, so we'll catch errors here
    return try {
        val file = getConfigFile()
        if (!file.exists()) file.writer().use { defaultSettings.store(it, settingsHeader) }
        val props = Properties(defaultSettings).apply { file.reader().use { load(it) } }
        props.load(Settings::class)
    } catch (e: Exception) {
        e.printStackTrace()
        defaultSettings.load(Settings::class)
    }
}